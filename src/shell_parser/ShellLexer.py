# Generated from Shell.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,12,92,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,1,1,
        1,5,1,30,8,1,10,1,12,1,33,9,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,
        5,1,6,4,6,45,8,6,11,6,12,6,46,1,7,1,7,4,7,51,8,7,11,7,12,7,52,1,
        7,1,7,1,8,1,8,1,8,1,8,1,8,4,8,62,8,8,11,8,12,8,63,5,8,66,8,8,10,
        8,12,8,69,9,8,1,8,1,8,1,9,1,9,4,9,75,8,9,11,9,12,9,76,1,9,1,9,1,
        10,4,10,82,8,10,11,10,12,10,83,1,11,4,11,87,8,11,11,11,12,11,88,
        1,11,1,11,0,0,12,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,1,0,8,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        8,0,9,10,32,32,34,34,39,39,59,60,62,62,96,96,124,124,2,0,10,10,39,
        39,3,0,10,10,34,34,96,96,2,0,10,10,96,96,4,0,32,32,59,60,62,62,124,
        124,3,0,9,10,13,13,32,32,101,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,1,25,1,0,0,0,3,
        27,1,0,0,0,5,34,1,0,0,0,7,36,1,0,0,0,9,38,1,0,0,0,11,41,1,0,0,0,
        13,44,1,0,0,0,15,48,1,0,0,0,17,56,1,0,0,0,19,72,1,0,0,0,21,81,1,
        0,0,0,23,86,1,0,0,0,25,26,5,124,0,0,26,2,1,0,0,0,27,31,7,0,0,0,28,
        30,7,1,0,0,29,28,1,0,0,0,30,33,1,0,0,0,31,29,1,0,0,0,31,32,1,0,0,
        0,32,4,1,0,0,0,33,31,1,0,0,0,34,35,5,59,0,0,35,6,1,0,0,0,36,37,5,
        62,0,0,37,8,1,0,0,0,38,39,5,62,0,0,39,40,5,62,0,0,40,10,1,0,0,0,
        41,42,5,60,0,0,42,12,1,0,0,0,43,45,8,2,0,0,44,43,1,0,0,0,45,46,1,
        0,0,0,46,44,1,0,0,0,46,47,1,0,0,0,47,14,1,0,0,0,48,50,5,39,0,0,49,
        51,8,3,0,0,50,49,1,0,0,0,51,52,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,
        0,53,54,1,0,0,0,54,55,5,39,0,0,55,16,1,0,0,0,56,67,5,34,0,0,57,66,
        3,19,9,0,58,62,8,4,0,0,59,60,5,92,0,0,60,62,5,34,0,0,61,58,1,0,0,
        0,61,59,1,0,0,0,62,63,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,64,66,
        1,0,0,0,65,57,1,0,0,0,65,61,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,
        67,68,1,0,0,0,68,70,1,0,0,0,69,67,1,0,0,0,70,71,5,34,0,0,71,18,1,
        0,0,0,72,74,5,96,0,0,73,75,8,5,0,0,74,73,1,0,0,0,75,76,1,0,0,0,76,
        74,1,0,0,0,76,77,1,0,0,0,77,78,1,0,0,0,78,79,5,96,0,0,79,20,1,0,
        0,0,80,82,8,6,0,0,81,80,1,0,0,0,82,83,1,0,0,0,83,81,1,0,0,0,83,84,
        1,0,0,0,84,22,1,0,0,0,85,87,7,7,0,0,86,85,1,0,0,0,87,88,1,0,0,0,
        88,86,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,91,6,11,0,0,91,24,1,
        0,0,0,11,0,31,46,52,61,63,65,67,76,83,88,1,6,0,0
    ]

class ShellLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    COMMAND = 2
    SEQUENCE_OP = 3
    REDIRECTION_OVERWRITE = 4
    REDIRECTION_APPEND = 5
    REDIRECTION_READ = 6
    UNQUOTED_ARG = 7
    SINGLE_QUOTED_ARG = 8
    DOUBLE_QUOTED_ARG = 9
    BACKQUOTED_ARG = 10
    FILE = 11
    WS = 12

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'|'", "';'", "'>'", "'>>'", "'<'" ]

    symbolicNames = [ "<INVALID>",
            "COMMAND", "SEQUENCE_OP", "REDIRECTION_OVERWRITE", "REDIRECTION_APPEND", 
            "REDIRECTION_READ", "UNQUOTED_ARG", "SINGLE_QUOTED_ARG", "DOUBLE_QUOTED_ARG", 
            "BACKQUOTED_ARG", "FILE", "WS" ]

    ruleNames = [ "T__0", "COMMAND", "SEQUENCE_OP", "REDIRECTION_OVERWRITE", 
                  "REDIRECTION_APPEND", "REDIRECTION_READ", "UNQUOTED_ARG", 
                  "SINGLE_QUOTED_ARG", "DOUBLE_QUOTED_ARG", "BACKQUOTED_ARG", 
                  "FILE", "WS" ]

    grammarFileName = "Shell.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


